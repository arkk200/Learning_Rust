// Slices (슬라이스)
// Vecs (벡터)

fn main() {
    // Slices

    let seasons = ["봄", "여름", "가을", "겨울"];
    // 슬라이스로 배열의 한 부분을 가져올 수 있다.
    // 파이썬의 배열과 비슷하게 [시작 인덱스..끝 인데스]로 가져올 수 있다.
    // &str에서 &(reference)이 컴파일러에게 알 수 없는 문자열의 크기를 알려주는 것처럼
    // 슬라이스도 마찬가지로 &을 써서 컴파일러에게
    // 배열이 자리잡아야할 스택의 크기를 알려주어야 한다.
    println!("{:?}", &seasons[0..2]);
    println!("{:?}", &seasons[0..=2]); // up to and including: 2번째 인덱스까지 포함시킨다.
    println!("{:?}", &seasons[..]); // .. 만 쓰면 모든 배열의 요소를 슬라이스해서 가져옴
    println!("{:?}", &seasons[1..]); // 1번째 인데스부터 끝까지 슬라이스함
    println!("{:?}", &seasons[..3]); // 처음부터 3번째 인데스 직전까지 슬라이스함 ["봄", "여름", "가을"]
    // 파이썬과 다르게 음수 인덱스는 존재하지 않는다.

    // Array는 &str처럼 간단하고 빠르다
    // 반대로 Vecs는 String처럼 느리지만 기능성있고 편리하다.
    // 지금까지 봐왔던 String은 Vec였다.
}